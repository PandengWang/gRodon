}
#adapted from S1 Fig: https://science.sciencemag.org/content/sci/suppl/2008/06/26/320.5884.1784.DC1/Coleman.SOM.pdf
library(seqinr)
library(dplyr)
pasteSlice <- function(i,j,x){
return(paste(x[i:j],collapse = ""))
}
DNAToCodons <- function(x){
begin_codon <- seq(1,length(x),3)
end_codon <- seq(3,length(x),3)
codon_vec <- mapply(pasteSlice,i=begin_codon,j=end_codon,MoreArgs = list(x=x))
return(codon_vec)
}
definePair <- function(p){
paste(sort(p),collapse="-")
}
countPairs <- function(codon_vec){
codon_pairs <- data.frame(C1=codon_vec[1:(length(codon_vec)-1)],
C2=codon_vec[2:(length(codon_vec))],
stringsAsFactors = F)
codon_pairs$P <- apply(codon_pairs,1,definePair)
codon_pairs <- codon_pairs %>% group_by(P) %>% count()
codon_pairs$Codon1 <- codon_pairs$P %>% gsub(pattern="-.*",replace="")
codon_pairs$Codon2 <- codon_pairs$P %>% gsub(pattern=".*-",replace="")
return(codon_pairs)
}
translateCodon <- function(x,numcode){
strsplit(x,split="") %>% unlist() %>% translate(.,numcode=numcode)
#translate(unlist(strsplit(x,split="")),numcode = numcode)
}
getAA <- function(codon_pairs,numcode){
codon_pairs$AA1 <- lapply(codon_pairs$Codon1,translateCodon,numcode=numcode) %>% unlist()
codon_pairs$AA2 <- lapply(codon_pairs$Codon2,translateCodon,numcode=numcode) %>% unlist()
codon_pairs$PAA <- apply(codon_pairs[,c("AA1","AA2")],1,definePair)
return(codon_pairs)
}
getCounts <- function(fna,numcode){
#Group Nucleotides into codons
fna_codons <- DNAToCodons(fna)
#Get AA
fna_aa <- translate(fna,numcode=numcode)
#Table of codon pair counts w/ columns for Codon and AA ids
count_tbl <- fna_codons %>% countPairs() %>%
getAA(.,numcode=numcode) %>% as.data.frame(stringsAsFactors=F)
count_tbl$n <- as.numeric(count_tbl$n)
#Single codon couns
codon_tbl <- table(fna_codons)
#Single aa counts
aa_tbl <- table(fna_aa)
#aa pair counts
aa_pair_tbl <- count_tbl %>% subset(select=c(PAA,n)) %>%
group_by(PAA) %>% summarise(PAA_n=sum(n)) %>%
as.data.frame(stringsAsFactors=F)
rownames(aa_pair_tbl) <- aa_pair_tbl$PAA
#Attach other counts to codon pair counts
count_tbl$Codon1_n <- codon_tbl[count_tbl$Codon1] %>% as.numeric()
count_tbl$Codon2_n <- codon_tbl[count_tbl$Codon2] %>% as.numeric()
count_tbl$AA1_n <- aa_tbl[count_tbl$AA1] %>% as.numeric()
count_tbl$AA2_n <- aa_tbl[count_tbl$AA2] %>% as.numeric()
count_tbl$PAA_n <- aa_pair_tbl[count_tbl$PAA,"PAA_n"] %>% as.numeric()
return(count_tbl)
}
CPB <- function(count_tbl){
count_tbl <- count_tbl %>%
mutate(CPS=log(n/(PAA_n*(Codon1_n*Codon2_n)/(AA1_n*AA2_n))))
CPB <- sum(count_tbl$CPS)/(nrow(count_tbl)-1)
return(CPB)
}
relativeCPB <- function(fna,ribo_vec){
#Filter for correct length
length_gene <- unlist(lapply(fna,length))
fna3 <- fna[(length_gene%%3)==0]
ribo_vec3 <- ribo_vec[(length_gene%%3)==0]
if(sum((length_gene%%3)>0)>0){
warning(paste("There were",sum((length_gene%%3)>0),"genes with lengths not multiples of 3, these genes have been ignored"))
}
#CPB Whole Genome
counts_genome <- fna3 %>% unlist() %>% getCounts(.,numcode=11)
CPB_genome <- CPB(counts_genome)
#CPB Ribosomal Proteins
ribo_fna <- fna3[which(ribo_vec3)]
counts_ribo <- ribo_fna %>% unlist() %>% getCounts(.,numcode=11)
CPB_ribo <- CPB(counts_ribo)
return(list(CPBgenomic=CPB_genome,CPBribo=CPB_ribo))
}
#
# genome_path <- "/media/jake/Jake3/GORG-tropics/RefSeqVS/Genes/GCF_000005845.2_ASM584v2_cds_from_genomic.fna"
# ribo_path <- "/media/jake/Jake3/GORG-tropics/RefSeqVS/RiboNames/GCF_000005845.2_ASM584v2_cds_from_genomic.fna.ribo"
#
# fna <- read.fasta(genome_path)
# ribo_names <- readLines(ribo_path) %>%
#   gsub(pattern=">",replace="") %>%
#   gsub(pattern=" .*",replace="")
#
# out <- relativeCPB(fna,ribo_vec=(names(fna) %in% ribo_names))
genome_list_file <- "/media/jake/Jake3/GORG-tropics/RefSeqVS/gene_files.txt"
genome_paths <- paste0("/media/jake/Jake3/GORG-tropics/RefSeqVS/Genes/",readLines(genome_list_file))
ribo_paths <- genome_paths %>% gsub(pattern="Genes/",replace="RiboNames/") %>% paste0(.,".ribo")
out <- list()
for(i in 1:length(genome_paths)){
print(i)
genome_path <- genome_paths[i]
ribo_path <- ribo_paths[i]
fna <- read.fasta(genome_path)
ribo_names <- readLines(ribo_path) %>%
gsub(pattern=">",replace="") %>%
gsub(pattern=" .*",replace="")
out[[i]] <- relativeCPB(fna,ribo_vec=(names(fna) %in% ribo_names))
}
?interacton
?interaction
x <- ("a","b","c")
x <- c("a","b","c")
y <- c("b","a","c")
interaction(x,y)
table(interaction(x,y))
out
length(genome_paths)
genome_path <- "/media/jake/Jake3/GORG-tropics/RefSeqVS/Genes/GCF_000005845.2_ASM584v2_cds_from_genomic.fna"
ribo_path <- "/media/jake/Jake3/GORG-tropics/RefSeqVS/RiboNames/GCF_000005845.2_ASM584v2_cds_from_genomic.fna.ribo"
fna <- read.fasta(genome_path)
ribo_names <- readLines(ribo_path) %>%
gsub(pattern=">",replace="") %>%
gsub(pattern=" .*",replace="")
length_gene <- unlist(lapply(fna,length))
fna3 <- fna[(length_gene%%3)==0]
ribo_vec3 <- ribo_vec[(length_gene%%3)==0]
if(sum((length_gene%%3)>0)>0){
warning(paste("There were",sum((length_gene%%3)>0),"genes with lengths not multiples of 3, these genes have been ignored"))
}
system.time(  #CPB Whole Genome
counts_genome <- fna3 %>% unlist() %>% getCounts(.,numcode=11)
CPB_genome <- CPB(counts_genome))
system.time(counts_genome <- fna3 %>% unlist() %>% getCounts(.,numcode=11))
system.time(lapply(fna3,getCounts))
system.time(lapply(fna3,getCounts,numcode=11))
knitr::opts_chunk$set(echo = TRUE)
library(SpiecEasi)
library(igraph)
#Custom colorblind pallette, see: https://stackoverflow.com/questions/57153428/r-plot-color-combinations-that-are-colorblind-accessible
customvermillion<-rgb(213/255,94/255,0/255)
custombluegreen<-rgb(0/255,158/255,115/255)
customblue<-rgb(0/255,114/255,178/255)
customskyblue<-rgb(86/255,180/255,233/255)
customreddishpurple<-rgb(204/255,121/255,167/255)
## Generate network, see https://github.com/zdk123/SpiecEasi for a nice walkthrough of this process with this example
#Load dara
data(amgut1.filt)
#Make up some Species "Names" since we don't care and the names aren't easily accessible in this matrix (unless you want to insall phyloseq)
colnames(amgut1.filt) <- make.names(rep(LETTERS[1:26],5),unique = T)[1:ncol(amgut1.filt)]
#Build network w/ spieceasi - It's gonna take a few minutes (sorry!)
se.gl.amgut <- spiec.easi(amgut1.filt, method='glasso', lambda.min.ratio=1e-2,
nlambda=20, pulsar.params=list(rep.num=50))
#Extract adjacency matrix from output  - Explain ADJ MAT vs. EDGE LIST
adj.mat <- getRefit(se.gl.amgut)
table(as.numeric(adj.mat))
head(adj.mat)
adj.mat
1411/100
1411/10
1411/50
1411/70
1411/75
genome_list_file <- "/media/jake/Jake3/GORG-tropics/RefSeqVS/gene_files.txt"
genome_paths <- paste0("/media/jake/Jake3/GORG-tropics/RefSeqVS/Genes/",readLines(genome_list_file))
seq(1,length(genome_paths),75)
seq(1,length(genome_paths),75) %>% length()
library(dplyr)
seq(1,length(genome_paths),75) %>% length()
c(seq(1,length(genome_paths),75),length(genome_paths))
chunks <- c(seq(1,length(genome_paths),75),length(genome_paths)+1)
chunks
## JLW 2020 - Comparison Against Growrthpred Results on Original Viera-Silva et
## al. Dataset
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(MASS)
library(ggplot2)
library(ggpubr)
library(car)
library(lmtest)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
boxcoxTransform <- function(x, lambda) {
if (lambda == 0) {
log(x) %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# Compile Dataset --------------------------------------------------------------
setwd("~/oligotrophy/Data")
# CUB, Consistency, CPB
load("CodonStatistics.RData")
#MILC/Consistency on VS genomes
vs <- read.csv("cub_sv.csv",head = T,stringsAsFactors = F)
# Growthpred on VS genomes
vsgp <-  read.delim("growthpred_VS.tbl",head = F,stringsAsFactors = F,sep="\t")
# Actual growth rates
d <- read.csv("growth_rates_viera-silva.csv",head = T,stringsAsFactors = F) %>%
subset(Extremophile!="X")
#Match genome accessions with species for dataset matching
spp_acc <- rbind(read.delim("spp_acc.tbl",sep="\t",head = F,
stringsAsFactors = F),
read.csv("spp_acc_byhand.csv",head = F,
stringsAsFactors = F)) %>%
subset(!duplicated(V1))
d$Species[d$NewName!=""] <- d$NewName[d$NewName!=""]
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cs_df$Species <- spp_acc[cs_df$Accession,"V2"]
cs_df$Species <- lapply(cs_df$Species,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
# Merge datasets
cs_df <- merge.easy(cs_df,d,key="Species")
names(vsgp) <- c("Accession","dGP")
vsgp$Accession <- vsgp$Accession %>% gsub(pattern="[.].*",replace="")
cs_df <- merge.easy(cs_df,vsgp,key="Accession")
# Average CUB estimates over species
vs_avg <- cs_df %>% group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
# Save compiled dataset
save(vs_avg,file="VS_avg.RData")
# Box Cox Transformation -------------------------------------------------------
#linear models
m_milc <- lm(d~CUBHE+ConsistencyHE+CPB,data=vs_avg)
m_gp <- lm(d~dGP,data=vs_avg)
#transformation
bc_milc <- boxcox(d~CUBHE+ConsistencyHE+CPB,data=vs_avg)
lambda_milc <- bc_milc$x[which.max(bc_milc$y)]
bc_gp <- boxcox(d~dGP,data=vs_avg)
lambda_gp <- bc_gp$x[which.max(bc_gp$y)]
# re-run with transformation
mnew_milc <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+CPB,data=vs_avg)
mnew_gp <- lm(boxcoxTransform(d, lambda_gp) ~ boxcoxTransform(dGP, lambda_gp),data=vs_avg)
#look at residuals
ggqqplot(m_milc$residuals)
ggqqplot(mnew_milc$residuals)
ggqqplot(m_gp$residuals)
ggqqplot(mnew_gp$residuals)
# Likelihood Ratio Test --------------------------------------------------------
# Nested Models
milc1 <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE,data=vs_avg)
milc2 <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE,data=vs_avg)
milc3 <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+CPB,data=vs_avg)
# LR Test
lrtest(milc1, milc2)
lrtest(milc1, milc3)
lrtest(milc2, milc3)
# Model Comparison/Performance -------------------------------------------------
summary(mnew_milc)
cor(boxcoxTransform(vs_avg$d, lambda_milc),mnew_milc$fitted.values)
summary(mnew_gp)
cor(boxcoxTransform(vs_avg$d, lambda_gp),mnew_gp$fitted.values)
plot(mnew_milc$fitted.values,boxcoxTransform(vs_avg$d, lambda_milc))
plot(mnew_gp$fitted.values,boxcoxTransform(vs_avg$d, lambda_gp))
# Save Model
gRodon_model <- mnew_milc
setwd("~/oligotrophy/Data")
save(gRodon_model,file="gRodon_model.RData")
View(vs_avg)
# Save Model
gRodon_model_base <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+CPB,data=vs_avg)
gRodon_model_temp <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+CPB+OGT,data=vs_avg)
gRodon_model_meta <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE,data=vs_avg)
gRodon_model_meta_temp <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+OGT,data=vs_avg)
summary(gRodon_model_temp)
summary(gRodon_model)
summary(gRodon_model_meta)
summary(gRodon_model_meta_temp)
2!="none"
mnew_milc
mnew_milc$fitted.values
setwd("/media/jake/Jake3/GORG-tropics/RefSeqVS/")
gene_files <- paste0("Genes/",readLines("gene_files.txt"))
path_genome <- gene_files[1]
genes <- readDNAStringSet(path_genome)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
a <- getCodonStatistics(genes, highly_expressed)
suppressPackageStartupMessages(library(coRdon))
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(dplyr))
getCUB <- function(fna_tab, highly_expressed, method = "MILC"){
if(method == "MILC"){
# MILC estimate of codon usage bias from coRdon
#   - Bias of highly expessed genes, with genome-wide codon usage considered
#     expected codon usage
x <- MILC(fna_tab,id_or_name2 = "11")
x[highly_expressed, 1] %>% median() %>% return()
} else if(method == "consistency"){
# Consistency of CUB across highly expressed genes
#   - Bias of highly expessed genes, with codon usage of highly expressed
#     gene set considered expected codon usage
milc <- MILC(fna_tab,
subsets = list(HE = highly_expressed),
id_or_name2 = "11")
milc[highly_expressed, 2] %>% mean() %>% return()
} else {
stop("Error: Please pick an implemented method (MILC, consistency)")
}
}
filterSeq <- function(genes, highly_expressed, length_threshold = 100){
# Gene lengths >= 80 for good behavior (see coRdon documentation)
# Throw out any genes w/ ambiguous frame
pass_filter <- (width(genes) > length_threshold) & ((width(genes) %% 3) == 0)
highly_expressed <- highly_expressed[pass_filter]
genes <- genes[pass_filter]
# Remove genes containing ambiguous bases
ambiguous_bases <- grepl("K|M|R|S|W|Y|N|V|H|D|B",genes)
highly_expressed <- highly_expressed[!ambiguous_bases]
genes <- genes[!ambiguous_bases]
# Warn user if genes have been filtered
if(sum(!pass_filter) > 0){
warning(paste("There were", sum(!pass_filter),
"genes either with lengths not multiples of 3 or not above length threshold (default 100bp),
these genes have been ignored"))
}
if(sum(ambiguous_bases) > 0){
warning(paste("There were", sum(ambiguous_bases),
"genes with ambiguous bases,
these genes have been ignored"))
}
return(list(Genes=genes, HE = highly_expressed, Filtered = sum(ambiguous_bases)+sum(!pass_filter)))
}
countCodonPairs <- function(codon_vec){
codon_pairs <- data.frame(C1=codon_vec[1:(length(codon_vec) - 1)],
C2=codon_vec[2:(length(codon_vec))],
stringsAsFactors = F)
codon_pairs$P <- paste(codon_pairs$C1, codon_pairs$C2, sep = "-")
codon_pairs <- codon_pairs %>% group_by(P) %>% count()
codon_pairs$Codon1 <- codon_pairs$P %>% gsub(pattern = "-.*", replace = "")
codon_pairs$Codon2 <- codon_pairs$P %>% gsub(pattern = ".*-", replace = "")
return(codon_pairs)
}
getAA <- function(codon_pairs){
codon_pairs$AA1 <- codon_pairs$Codon1 %>% DNAStringSet() %>%
translate(genetic.code = getGeneticCode(id_or_name2="11")) %>%
as.character()
codon_pairs$AA2 <- codon_pairs$Codon2 %>% DNAStringSet() %>%
translate(genetic.code = getGeneticCode(id_or_name2="11")) %>%
as.character()
codon_pairs$PAA <- paste(codon_pairs$AA1, codon_pairs$AA2, sep="-")
return(codon_pairs)
}
getPairCounts <- function(genes){
genome <- unlist(genes)
#Group Nucleotides into codons
codon_vec <- genome %>% codons() %>% as.character()
#Get AA
aa_vec <- translate(genome,
genetic.code = getGeneticCode(id_or_name2="11")) %>%
as.character() %>% strsplit(split="") %>% unlist()
#Table of codon pair counts w/ columns for Codon and AA ids
count_tbl <- codon_vec %>% countCodonPairs() %>%
getAA() %>% as.data.frame(stringsAsFactors = F)
count_tbl$n <- as.numeric(count_tbl$n)
#Single codon couns
codon_tbl <- table(codon_vec)
#Single aa counts
aa_tbl <- table(aa_vec)
#aa pair counts
aa_pair_tbl <- count_tbl %>% subset(select = c(PAA,n)) %>%
group_by(PAA) %>% summarise(PAA_n = sum(n)) %>%
as.data.frame(stringsAsFactors = F)
rownames(aa_pair_tbl) <- aa_pair_tbl$PAA
#Attach other counts to codon pair counts
count_tbl$Codon1_n <- codon_tbl[count_tbl$Codon1] %>% as.numeric()
count_tbl$Codon2_n <- codon_tbl[count_tbl$Codon2] %>% as.numeric()
count_tbl$AA1_n <- aa_tbl[count_tbl$AA1] %>% as.numeric()
count_tbl$AA2_n <- aa_tbl[count_tbl$AA2] %>% as.numeric()
count_tbl$PAA_n <- aa_pair_tbl[count_tbl$PAA,"PAA_n"] %>% as.numeric()
return(count_tbl)
}
getCPB <- function(count_tbl){
count_tbl <- count_tbl %>%
mutate(CPS = log(n / (PAA_n * (Codon1_n * Codon2_n) / (AA1_n * AA2_n))))
CPB <- sum(count_tbl$CPS) / (nrow(count_tbl) - 1)
return(CPB)
}
getCodonStatistics <- function(genes, highly_expressed){
if(sum(highly_expressed) == 0){
stop("No highly expressed genes?")
}
#Remove short sequences and sequences that are not multiples of 3
filtered <- filterSeq(genes, highly_expressed)
genes <- filtered$Genes
highly_expressed <- filtered$HE
# codon table
codon_table <- codonTable(genes)
# codon pair counts
codon_pair_table <- getPairCounts(genes)
return(data.frame(CUBHE = getCUB(codon_table,
highly_expressed,
method = "MILC"),
ConsistencyHE = getCUB(codon_table,
highly_expressed,
method = "consistency"),
CPB = getCPB(codon_pair_table),
FilteredSequences = filtered$Filtered,
stringsAsFactors = FALSE))
}
boxcoxTransform <- function(x, lambda) {
if (lambda == 0) {
log(x) %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
genes <- readDNAStringSet(path_genome)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
a <- getCodonStatistics(genes, highly_expressed)
a
pred <- stats::predict.lm(gRodon_model_base, newdata = a)
pred
?predict.lm
pred <- stats::predict.lm(gRodon_model_base, newdata = a, interval = "confidence")
pred
boxcoxTransform(pred,
lambda_milc,
back_transform = TRUE)
codon_stats <- getCodonStatistics(genes, highly_expressed)
codon_stats
codon_stats <- getCodonStatistics(genes, highly_expressed)
pred_back_transformed["fit"]
pred_back_transformed <- boxcoxTransform(pred,
lambda_milc,
back_transform = TRUE)
pred_back_transformed["fit"]
pred_back_transformed
pred_back_transformed[,"fit"]
genes
getGrowth(genes,
highly_expressed)
getGrowth <- function(genes,
highly_expressed,
metagenome = FALSE,
temperature = "none"){
# Calculate codon data
codon_stats <- getCodonStatistics(genes, highly_expressed)
# Predict growth rate (stored models - sysdata.rda)
if(temperature == "none" & metagenome == FALSE){
pred <- stats::predict.lm(gRodon_model_base,
newdata = codon_stats,
interval = "confidence")
} else if(temperature == "none" & metagenome == TRUE){
pred <- stats::predict.lm(gRodon_model_meta,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & metagenome == FALSE){
pred <- stats::predict.lm(gRodon_model_temp,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & metagenome == TRUE){
pred <- stats::predict.lm(gRodon_model_meta_temp,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_milc,
back_transform = TRUE)
#return prediction
codon_stats$d <- pred_back_transformed[,"fit"]
codon_stats$LowerCI <- pred_back_transformed[,"lwr"]
codon_stats$UpperCI <- pred_back_transformed[,"upr"]
return(codon_stats)
}
getGrowth(genes,
highly_expressed)
library(devtools)
library(roxygen2)
setwd("~/")
devtools::create("myfirstpackage")
devtools::create("gRodon")
setwd("~/gRodon/R")
save(gRodon_model_base,
gRodon_model_temp,
gRodon_model_meta,
gRodon_model_meta_temp,
lambda_milc,
file="sysdata.rda")
View(codon_stats)
codon_stats$d <- pred_back_transformed[,"fit"]
codon_stats$LowerCI <- pred_back_transformed[,"lwr"]
codon_stats$UpperCI <- pred_back_transformed[,"upr"]
View(codon_stats)
as.list(codon_stats)
class(genes)
names(codon_stats)
