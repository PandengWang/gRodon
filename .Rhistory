ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=CUBHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Consistency (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Inonsistency (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Inconsistency (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=d,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_y_log10()+ scale_x_log10() + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") + ylab("Dounling Time (Hours)")
ggplot(sag_df,aes(y=SeqLen,x=nHE)) +
geom_point() + stat_smooth()  +
scale_y_log10() + theme_bw() +
geom_hline(yintercept = 5e5, lty=2,color="red") +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") + ylab("SAG Sequence Length")
ggplot(sag_df,aes(y=d,x=nHE)) +
geom_point() + stat_smooth()  +
scale_y_log10()  + theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") + ylab("Dounling Time (Hours)")
ggplot(sag_df[sag_df$nHE>=10,],aes(y=d,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_y_log10()+ scale_x_log10() + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") + ylab("Dounling Time (Hours)")
sag_df <- sag_df %>% subset(nHE>=10)
m <- Mclust(sag_df$d)
plot(m)
m <- Mclust(sag_df$d,modelNames = "E")
plot(m)
plot(density(sag_df$d),
xlab="Doubling Time (Hours)",
main="GORG-tropics SAGs",
lwd=2,
cex.axis=1.25,
cex.lab=1.5,
xlim=c(0,25))
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(d),max(d),diff(range(d))/1000),
dnorm(seq(min(d),max(d),diff(range(d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[i]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
plot(m)
plot(density(sag_df$d),
xlab="Doubling Time (Hours)",
main="GORG-tropics SAGs",
lwd=2,
cex.axis=1.25,
cex.lab=1.5,
xlim=c(0,25))
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(d),max(d),diff(range(d))/1000),
dnorm(seq(min(d),max(d),diff(range(d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[1]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
plot(density(sag_df$d),
xlab="Doubling Time (Hours)",
main="GORG-tropics SAGs",
lwd=2,
cex.axis=1.25,
cex.lab=1.5)
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(d),max(d),diff(range(d))/1000),
dnorm(seq(min(d),max(d),diff(range(d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[1]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
m$parameters
sag_df$m <- m$classification
boxplot(sag_df$d~sag_df$m)
table(sag_df$m)
mean(sag_df$d[sag_df$m==2])
mean(sag_df$d[sag_df$m==3])
mean(sag_df$d[sag_df$m==4])
?Mclust
library(dplyr)
library(data.table)
library(mclust)
library(ggsci)
library(ggfortify)
library(ggplot2)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
setwd("~/oligotrophy/Data")
load("CodonStatistics_GORG-tropics.RData")
d <- sag_df$d %>% unlist()
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df <- sag_df %>% mutate_all(unlist)
coding <- read.delim("coding_length.tsv",header = F,stringsAsFactors = F) %>%
mutate(Seq=gsub("_genomic.*","",V1))
gclen <- read.delim("gc_and_length.tsv",header = F,stringsAsFactors = F) %>%
mutate(Seq=gsub("_genomic.*","",V1))
table(coding$Seq==gclen$Seq)
meta <- read.csv("gorg-tropics_sags_meta.csv",stringsAsFactors = F)
gclen$CodingLen <- coding$V2
names(gclen)[2:3] <- c("SeqLen","GC")
gclen$PercentCoding <- gclen$CodingLen/gclen$SeqLen
gclen$ID <- gclen$Seq %>% gsub(pattern=".*_",replace="")
sag_df <- merge.easy(sag_df,gclen,key="ID")
ggplot(sag_df,aes(y=CUBHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=CUBHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
plot(density(sag_df$CUBHE))
plot(density(sag_df$ConsistencyHE))
ggplot(sag_df,aes(y=CUBHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=CUBHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Inconsistency (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Inconsistency (Ribosomal Proteins)")
plot(density(sag_df$CUBHE%>%log10()))
x <- sag_df$CUBHE%>%log10()
m <- Mclust(x)
plot(m)
m <- Mclust(x,modelNames = "E")
plot(m)
plot(density(sag_df$CUBHE%>%log10()))
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(d),max(d),diff(range(d))/1000),
dnorm(seq(min(d),max(d),diff(range(d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[1]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
m <- Mclust(sag_df$d,modelNames = "E")
## JLW 2020 - Analysis of gRodon on GORG-tropics SAGs
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(mclust)
library(ggsci)
library(ggfortify)
library(ggplot2)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/oligotrophy/Data")
load("CodonStatistics_GORG-tropics.RData")
d <- sag_df$d %>% unlist()
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df <- sag_df %>% mutate_all(unlist)
coding <- read.delim("coding_length.tsv",header = F,stringsAsFactors = F) %>%
mutate(Seq=gsub("_genomic.*","",V1))
gclen <- read.delim("gc_and_length.tsv",header = F,stringsAsFactors = F) %>%
mutate(Seq=gsub("_genomic.*","",V1))
table(coding$Seq==gclen$Seq)
meta <- read.csv("gorg-tropics_sags_meta.csv",stringsAsFactors = F)
gclen$CodingLen <- coding$V2
names(gclen)[2:3] <- c("SeqLen","GC")
gclen$PercentCoding <- gclen$CodingLen/gclen$SeqLen
gclen$ID <- gclen$Seq %>% gsub(pattern=".*_",replace="")
sag_df <- merge.easy(sag_df,gclen,key="ID")
# Completeness -----------------------------------------------------------------
ggplot(sag_df,aes(y=CUBHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=CUBHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Codon Usage Bias (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=nHE)) +
geom_point() + stat_smooth()  +
theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") +
ylab("Inconsistency (Ribosomal Proteins)")
ggplot(sag_df,aes(y=ConsistencyHE,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_x_log10()  + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") +
ylab("Inconsistency (Ribosomal Proteins)")
ggplot(sag_df,aes(y=d,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_y_log10()+ scale_x_log10() + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") + ylab("Dounling Time (Hours)")
ggplot(sag_df,aes(y=SeqLen,x=nHE)) +
geom_point() + stat_smooth()  +
scale_y_log10() + theme_bw() +
geom_hline(yintercept = 5e5, lty=2,color="red") +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") + ylab("SAG Sequence Length")
ggplot(sag_df,aes(y=d,x=nHE)) +
geom_point() + stat_smooth()  +
scale_y_log10()  + theme_bw() +
geom_vline(xintercept = 10, lty=2,color="red") +
xlab("Number of Ribosomal Proteins") + ylab("Dounling Time (Hours)")
ggplot(sag_df[sag_df$nHE>=10,],aes(y=d,x=SeqLen)) +
geom_point() + stat_smooth()  +
scale_y_log10()+ scale_x_log10() + theme_bw() +
geom_vline(xintercept = 5e5, lty=2,color="red") +
xlab("SAG Sequence Length") + ylab("Dounling Time (Hours)")
sag_df <- sag_df %>% subset(nHE>=10)
# Cluster by Growth Rate -------------------------------------------------------
m <- Mclust(sag_df$d,modelNames = "E")
plot(density(sag_df$d),
xlab="Doubling Time (Hours)",
main="GORG-tropics SAGs",
lwd=2,
cex.axis=1.25,
cex.lab=1.5)
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(sag_df$d),max(sag_df$d),diff(range(sag_df$d))/1000),
dnorm(seq(min(sag_df$d),max(sag_df$d),diff(range(sag_df$d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[1]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
m <- Mclust(sag_df$d)
plot(density(sag_df$d),
xlab="Doubling Time (Hours)",
main="GORG-tropics SAGs",
lwd=2,
cex.axis=1.25,
cex.lab=1.5)
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(sag_df$d),max(sag_df$d),diff(range(sag_df$d))/1000),
dnorm(seq(min(sag_df$d),max(sag_df$d),diff(range(sag_df$d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[1]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
sag_df$d <- sag_df$CUBHE
m <- Mclust(sag_df$d)
plot(density(sag_df$d),
xlab="Doubling Time (Hours)",
main="GORG-tropics SAGs",
lwd=2,
cex.axis=1.25,
cex.lab=1.5)
plot_colors <- c(pal_npg("nrc")(10)[1],
pal_npg("nrc")(10)[6],
pal_npg("nrc")(10)[3],
pal_npg("nrc")(10)[10])
p <- (colSums(m$z)/sum(m$z))
for(i in 1:m$G){
lines(seq(min(sag_df$d),max(sag_df$d),diff(range(sag_df$d))/1000),
dnorm(seq(min(sag_df$d),max(sag_df$d),diff(range(sag_df$d))/1000),
mean=m$parameters$mean[i],
sd=sqrt(m$p$variance$sigmasq[1]))*p[i],
col=plot_colors[i],
lwd=3)
abline(v=m$parameters$mean[i],lty=2,col=plot_colors[i],lwd=2)
}
setwd("~/")
devtools::load_all("gRodon")
?predictGrowth
x <- list("A","B",c(1,2,3))
gewd()
getwd()
write(x,file="testwrite.txt")
basename("my/path")
basename("/my/path")
setwd("~/")
devtools::load_all("gRodon")
doAssembly <- function(path_assembly_gz,done_folder,out_folder){
system(paste("gunzip",path_assembly_gz))
path_assembly <- path_assembly_gz %>% gsub(pattern="fna[.]gz" , replace="fna")
print(path_assembly)
genes <- readDNAStringSet(path_assembly)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
system(paste("mv",path_assembly,done_folder))
if(sum(highly_expressed)>1){
out <- c(list(assembly = path_assembly,
nHE = sum(highly_expressed)),
predictGrowth(genes, highly_expressed))
save(out,file=paste0(out_folder,basename(path_assembly),"gRodon.rda"))
return(out)
} else {
return(NULL)
}
}
gene_files <- paste0("/media/jake/Jake3/Genes_RefSeq/",
readLines("/media/jake/Jake3/Genes_RefSeq/gz_files_05082020.txt"))
done_folder <- "/media/jake/Jake3/Genes_RefSeq/Done/"
out_folder <- "/media/jake/Jake3/Genes_RefSeq/Out/"
gene_files[1]
doAssembly(gene_files[1],done_folder[1],out_folder[1])
setwd("gRodon/R")
devtools::load_all()
devtools::document()
setwd("~/")
devtools::load_all("gRodon")
doAssembly <- function(path_assembly_gz,done_folder,out_folder){
system(paste("gunzip",path_assembly_gz))
path_assembly <- path_assembly_gz %>% gsub(pattern="fna[.]gz" , replace="fna")
print(path_assembly)
genes <- readDNAStringSet(path_assembly)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
system(paste("mv",path_assembly,done_folder))
if(sum(highly_expressed)>1){
out <- c(list(assembly = path_assembly,
nHE = sum(highly_expressed)),
predictGrowth(genes, highly_expressed))
save(out,file=paste0(out_folder,basename(path_assembly),"gRodon.rda"))
return(out)
} else {
return(NULL)
}
}
system("mkdir /media/jake/Jake3/Genes_RefSeq/Done")
system("mkdir /media/jake/Jake3/Genes_RefSeq/Out")
gene_files <- paste0("/media/jake/Jake3/Genes_RefSeq/",
readLines("/media/jake/Jake3/Genes_RefSeq/gz_files_05082020.txt"))
done_folder <- "/media/jake/Jake3/Genes_RefSeq/Done/"
out_folder <- "/media/jake/Jake3/Genes_RefSeq/Out/"
doAssembly(gene_files[1],done_folder[1],out_folder[1])
doAssembly(gene_files[1],done_folder[1],out_folder[1])
x <- c(1,2,3,4)
x[-1]
stwd("~/gRodon")
setwd("~/gRodon")
devtools::use_vignette("gRodon-vignette")
library(devtools)
devtools::use_vignette("gRodon-vignette")
devtools::use_vignette()
devtools::use_vignette("my-vignette")
install.packages("devtools")
install.packages("devtools")
devtools::use_vignette("my-vignette")
usethis::use_vignette("gRodon-vignette")
library(gRodon)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(gRodon)
?predictGrowth
getwd()
devtools::document()
# library(gRodon)
library(Biostrings)
path_to_genome <- system.file('extdata',
'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna',
package = 'gRodon')
genes <- readDNAStringSet(path_to_genome)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
predictGrowth(genes, highly_expressed)
devtools::document()
devtools::build()
.Last.error.trace
devtools::load_all("~/gRodon")
#library(Biostrings)
path_to_genome <- system.file('extdata',
'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna',
package = 'gRodon')
genes <- readDNAStringSet(path_to_genome)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
predictGrowth(genes, highly_expressed)
devtools::update_packages()
?install_github
usethis::edit_r_environ()
devtools::update_packages()
library("~/gRodon")
library(gRodon)
library(gRodon)
#library(Biostrings)
path_to_genome <- system.file('extdata',
'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna',
package = 'gRodon')
genes <- readDNAStringSet(path_to_genome)
library(gRodon)
#library(Biostrings)
path_to_genome <- system.file('extdata',
'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna',
package = 'gRodon')
genes <- readDNAStringSet(path_to_genome)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
predictGrowth(genes, highly_expressed)
devtools::update_packages()
devtools::update_packages()
library(gRodon)
library(Biostrings)
path_to_genome <- system.file('extdata',
'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna',
package = 'gRodon')
genes <- readDNAStringSet(path_to_genome)
predictGrowth(genes, highly_expressed)
library(gRodon)
library(Biostrings)
path_to_genome <- system.file('extdata',
'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna',
package = 'gRodon')
genes <- readDNAStringSet(path_to_genome)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
predictGrowth(genes, highly_expressed)
getwd()
devtools::document()
devtools::document()
devtools::document()
devtools::update_packages()
library(gRodon)
devtools::update_packages()
library(gRodon)
devtools::document()
devtools::document()
devtools::document()
devtools::update_packages()
